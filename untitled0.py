# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-Cmz_PZQNvRFuSyu_7INwbFnqKYxYKrW
"""

from google.colab import files
uploaded = files.upload()

!pip install shap scikit-learn pandas matplotlib seaborn

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
import shap
import matplotlib.pyplot as plt

# Load dataset
df = pd.read_csv('stroke_prediction_dataset.csv')

# STEP 3: Load dataset
df = pd.read_csv('/content/stroke_prediction_dataset.csv')

df.columns = df.columns.str.strip()
df.drop(['Patient ID', 'Patient Name'], axis=1, inplace=True)

from sklearn.preprocessing import LabelEncoder
# STEP 5: Encode categorical variables
label_encoders = {}
for col in df.select_dtypes(include='object').columns:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

# STEP 6: Define features and target
X = df.drop('Diagnosis', axis=1)
y = df['Diagnosis']

# STEP 7: Split the dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# STEP 8: Train the model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
# STEP 9: Evaluate the model
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))

# STEP 10: Explain model predictions using SHAP
explainer = shap.TreeExplainer(model)
shap_values = explainer.shap_values(X_test)

# STEP 11: Summary plot
shap.summary_plot(shap_values, X_test, plot_type="bar")